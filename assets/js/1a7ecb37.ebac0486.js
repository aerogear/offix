(window.webpackJsonp=window.webpackJsonp||[]).push([[10],{116:function(e,t,n){"use strict";n.d(t,"a",(function(){return f})),n.d(t,"b",(function(){return b}));var r=n(0),a=n.n(r);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function c(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=a.a.createContext({}),p=function(e){var t=a.a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):c(c({},t),e)),n},f=function(e){var t=p(e.components);return a.a.createElement(l.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.a.createElement(a.a.Fragment,{},t)}},m=a.a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,i=e.parentName,l=s(e,["components","mdxType","originalType","parentName"]),f=p(n),m=r,b=f["".concat(i,".").concat(m)]||f[m]||u[m]||o;return n?a.a.createElement(b,c(c({ref:t},l),{},{components:n})):a.a.createElement(b,c({ref:t},l))}));function b(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,i=new Array(o);i[0]=m;var c={};for(var s in t)hasOwnProperty.call(t,s)&&(c[s]=t[s]);c.originalType=e,c.mdxType="string"==typeof e?e:r,i[1]=c;for(var l=2;l<o;l++)i[l]=n[l];return a.a.createElement.apply(null,i)}return a.a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},71:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return i})),n.d(t,"metadata",(function(){return c})),n.d(t,"toc",(function(){return s})),n.d(t,"default",(function(){return p}));var r=n(3),a=n(7),o=(n(0),n(116)),i={id:"react-native",title:"React Native",sidebar_label:"React Native"},c={unversionedId:"react-native",id:"version-offix-0.15.0/react-native",isDocsHomePage:!1,title:"React Native",description:"To integrate offix in React Native, developers need to provide custom storage and network layers,",source:"@site/versioned_docs/version-offix-0.15.0/react-native.md",slug:"/react-native",permalink:"/docs/offix-0.15.0/react-native",editUrl:"https://github.com/aerogear/offix/edit/master/website/versioned_docs/version-offix-0.15.0/react-native.md",version:"offix-0.15.0",sidebar_label:"React Native",sidebar:"version-offix-0.15.0/docs",previous:{title:"React - using Offix Hooks",permalink:"/docs/offix-0.15.0/react"},next:{title:"Angular",permalink:"/docs/offix-0.15.0/angular"}},s=[{value:"Integration",id:"integration",children:[]}],l={toc:s};function p(e){var t=e.components,n=Object(a.a)(e,["components"]);return Object(o.b)("wrapper",Object(r.a)({},l,n,{components:t,mdxType:"MDXLayout"}),Object(o.b)("p",null,"To integrate offix in React Native, developers need to provide custom storage and network layers,\na working example can be found in the offix ",Object(o.b)("a",{parentName:"p",href:"https://github.com/aerogear/offix/tree/master/examples/react-native"},"React Native example app"),"."),Object(o.b)("p",null,"We recomend developers use following React Native plugins:"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"@react-native-community/async-storage")," - for storage"),Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"@react-native-community/netinfo")," - for network information")),Object(o.b)("p",null,"Note: if you are using ",Object(o.b)("a",{parentName:"p",href:"https://expo.io/"},"Expo"),", you must use the ",Object(o.b)("a",{parentName:"p",href:"https://facebook.github.io/react-native/docs/asyncstorage"},"AsyncStorage included in ",Object(o.b)("inlineCode",{parentName:"a"},"react-native"))," instead."),Object(o.b)("h2",{id:"integration"},"Integration"),Object(o.b)("p",null,"To integrate with offix we need to create wrappers for storage and network."),Object(o.b)("p",null,"Note: if using expo, you will need to ",Object(o.b)("inlineCode",{parentName:"p"},"import { AsyncStorage } from 'react-native';")," instead of using the ",Object(o.b)("inlineCode",{parentName:"p"},"@react-native-community/async-storage")," package."),Object(o.b)("p",null,"For the network listener, create a new class ",Object(o.b)("inlineCode",{parentName:"p"},"ReactNativeNetworkStatus.js"),"."),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-js"},'import NetInfo from "@react-native-community/netinfo";\n\nexport class ReactNativeNetworkStatus {\n\n  listeners = [];\n\n  constructor() {\n    NetInfo.addEventListener(this.handleNetworkStatusChange.bind(this));\n  }\n\n  addListener(listener) {\n    this.listeners.push(listener);\n  }\n\n  removeListener(listener) {\n    const index = this.listeners.indexOf(listener);\n    if (index >= 0) {\n      this.listeners.splice(index, 1);\n    }\n  }\n\n  isOffline() {\n    return new Promise((resolve) => {\n      NetInfo.fetch().then(state => {\n        resolve(!state.isInternetReachable);\n      });\n    });\n  }\n\n  handleNetworkStatusChange(state) {\n    const online = state.isInternetReachable;\n    this.listeners.forEach((listener) => {\n      listener({ online });\n    });\n  }\n}\n')),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-js"},"import { ApolloOfflineClient } from 'offix-client'\nimport { InMemoryCache } from 'apollo-cache-inmemory';\nimport { HttpLink } from 'apollo-link-http';\nimport AsyncStorage from '@react-native-community/async-storage'\nimport NetInfo from '@react-native-community/netinfo'\nimport ReactNativeNetworkStatus from './ReactNativeNetworkStatus'\n\n// Create cache wrapper\nconst cacheStorage = {\n  getItem: async (key) => {\n    const data = await AsyncStorage.getItem(key);\n    if (typeof data === 'string') {\n      return JSON.parse(data);\n    }\n    return data;\n  },\n  setItem: async (key, value) => {\n    let valueStr = value;\n    if (typeof valueStr === 'object') {\n      valueStr = JSON.stringify(value);\n    }\n    return AsyncStorage.setItem(key, valueStr);\n  },\n  removeItem: async (key) => {\n    return AsyncStorage.removeItem(key);\n  }\n};\n\n// Init network interface\nconst networkStatus = new ReactNativeNetworkStatus();\n\n// Create client\nconst offlineClient = new ApolloOfflineClient({\n  cache: new InMemoryCache(),\n  link: new HttpLink({ uri: 'http://localhost:4000/graphql' }),\n  offlineStorage: cacheStorage,\n  cacheStorage,\n  networkStatus\n});\n")),Object(o.b)("p",null,"For a fully functional example please check react native example app:\n",Object(o.b)("a",{parentName:"p",href:"https://github.com/aerogear/offix-react-native-example"},"https://github.com/aerogear/offix-react-native-example")))}p.isMDXComponent=!0}}]);