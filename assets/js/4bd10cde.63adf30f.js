(window.webpackJsonp=window.webpackJsonp||[]).push([[20],{116:function(e,t,n){"use strict";n.d(t,"a",(function(){return u})),n.d(t,"b",(function(){return f}));var r=n(0),a=n.n(r);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var p=a.a.createContext({}),l=function(e){var t=a.a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},u=function(e){var t=l(e.components);return a.a.createElement(p.Provider,{value:t},e.children)},b={inlineCode:"code",wrapper:function(e){var t=e.children;return a.a.createElement(a.a.Fragment,{},t)}},d=a.a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,i=e.parentName,p=c(e,["components","mdxType","originalType","parentName"]),u=l(n),d=r,f=u["".concat(i,".").concat(d)]||u[d]||b[d]||o;return n?a.a.createElement(f,s(s({ref:t},p),{},{components:n})):a.a.createElement(f,s({ref:t},p))}));function f(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,i=new Array(o);i[0]=d;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s.mdxType="string"==typeof e?e:r,i[1]=s;for(var p=2;p<o;p++)i[p]=n[p];return a.a.createElement.apply(null,i)}return a.a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},87:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return i})),n.d(t,"metadata",(function(){return s})),n.d(t,"toc",(function(){return c})),n.d(t,"default",(function(){return l}));var r=n(3),a=n(7),o=(n(0),n(116)),i={id:"react-native",title:"React Native - using Datastore for Mobile",sidebar_label:"React Native"},s={unversionedId:"react-native",id:"version-datastore-0.5.0/react-native",isDocsHomePage:!1,title:"React Native - using Datastore for Mobile",description:"Offix Datastore provides support for indexeddb by default.",source:"@site/versioned_docs/version-datastore-0.5.0/react-native.md",slug:"/react-native",permalink:"/docs/react-native",editUrl:"https://github.com/aerogear/offix/edit/master/website/versioned_docs/version-datastore-0.5.0/react-native.md",version:"datastore-0.5.0",sidebar_label:"React Native",sidebar:"version-datastore-0.5.0/docs",previous:{title:"React - using Datastore Hooks",permalink:"/docs/react"},next:{title:"Datastore CLI",permalink:"/docs/cli"}},c=[{value:"Storage",id:"storage",children:[]},{value:"Network Status",id:"network-status",children:[]}],p={toc:c};function l(e){var t=e.components,n=Object(a.a)(e,["components"]);return Object(o.b)("wrapper",Object(r.a)({},p,n,{components:t,mdxType:"MDXLayout"}),Object(o.b)("p",null,"Offix Datastore provides support for ",Object(o.b)("inlineCode",{parentName:"p"},"indexeddb")," by default.\nWhen using datastore in React Native is necessary to override the default storage and network implementations. "),Object(o.b)("h2",{id:"storage"},"Storage"),Object(o.b)("p",null,"The Datastore provides an SQLite adapter out of the box. In order to enable this storage options can be passed as the second paramater to the datastore constructor."),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-javascript"},'...\nimport { SQLiteAdapter } from "offix-datastore/dist/storage/adapters/sqlite/SQLiteAdapter";\n...\n\nexport const datastore = new DataStore({\n  // datastore config\n}, {\n  storeAdapter: new SQLiteAdapter("offixdb", "1.0") // name & version\n});\n')),Object(o.b)("h2",{id:"network-status"},"Network Status"),Object(o.b)("p",null,"Since the default implementation relies on the browser ",Object(o.b)("inlineCode",{parentName:"p"},"window.navigator")," for network connectivity, it is necessary to provide an implementation of the ",Object(o.b)("inlineCode",{parentName:"p"},"NetworkStatus")," interface for native application. This can be done with ",Object(o.b)("a",{parentName:"p",href:"https://capacitorjs.com/docs/apis/network"},"Capacitor")," or ",Object(o.b)("a",{parentName:"p",href:"https://github.com/react-native-community/react-native-netinfo"},"@react-native-community/netinfo")," for React Native."),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-javascript"},'import { NetworkStatus, NetworkStatusEvent } from "offix-datastore";\nimport Observable from "zen-observable";\nimport NetInfo from "@react-native-community/netinfo";\n\n/**\n * Uses web api to detect network status changes\n */\nexport class ReactNativeNetworkStatus implements NetworkStatus {\n\n  public observable: Observable<NetworkStatusEvent>;\n\n  constructor() {\n    this.observable = new Observable((observer) => {\n      NetInfo.addEventListener((state) => observer.next({ isOnline: state.isConnected }));\n    });\n  }\n\n  public subscribe(observer: ZenObservable.Observer<NetworkStatusEvent>) {\n    return this.observable.subscribe(observer);\n  }\n\n  public isOnline(): Promise<boolean> {\n    return new Promise((resolve, reject) => {\n      NetInfo.fetch()\n        .then((state) => resolve(state.isConnected))\n        .catch((err) => reject(err));\n    });\n  }\n}\n')),Object(o.b)("p",null,"This can then be provided as in the config for the Datastore"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-javascript"},"export const datastore = new DataStore({\n  // normal config options\n  ...\n  networkStatus: new ReactNativeNetworkStatus(),\n  ...\n}, {\n  // custom engine config\n});\n")))}l.isMDXComponent=!0}}]);