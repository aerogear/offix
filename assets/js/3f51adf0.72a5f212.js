(window.webpackJsonp=window.webpackJsonp||[]).push([[27],{148:function(e,t,n){"use strict";n.d(t,"a",(function(){return p})),n.d(t,"b",(function(){return m}));var a=n(0),r=n.n(a);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function c(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=r.a.createContext({}),d=function(e){var t=r.a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):c(c({},t),e)),n},p=function(e){var t=d(e.components);return r.a.createElement(l.Provider,{value:t},e.children)},b={inlineCode:"code",wrapper:function(e){var t=e.children;return r.a.createElement(r.a.Fragment,{},t)}},u=r.a.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,i=e.parentName,l=s(e,["components","mdxType","originalType","parentName"]),p=d(n),u=a,m=p["".concat(i,".").concat(u)]||p[u]||b[u]||o;return n?r.a.createElement(m,c(c({ref:t},l),{},{components:n})):r.a.createElement(m,c({ref:t},l))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=u;var c={};for(var s in t)hasOwnProperty.call(t,s)&&(c[s]=t[s]);c.originalType=e,c.mdxType="string"==typeof e?e:a,i[1]=c;for(var l=2;l<o;l++)i[l]=n[l];return r.a.createElement.apply(null,i)}return r.a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},94:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return i})),n.d(t,"metadata",(function(){return c})),n.d(t,"toc",(function(){return s})),n.d(t,"default",(function(){return d}));var a=n(3),r=n(7),o=(n(0),n(148)),i={id:"getting-started",title:"Getting Started",sidebar_label:"Getting Started"},c={unversionedId:"getting-started",id:"version-0.5.0/getting-started",isDocsHomePage:!1,title:"Getting Started",description:"Installing Offix DataStore",source:"@site/versioned_docs/version-0.5.0/ref-getting-started.md",slug:"/getting-started",permalink:"/docs/getting-started",editUrl:"https://github.com/aerogear/offix/edit/master/website/versioned_docs/version-0.5.0/ref-getting-started.md",version:"0.5.0",sidebar_label:"Getting Started",sidebar:"version-0.5.0/docs",previous:{title:"Introduction to Offix Datastore",permalink:"/docs/introduction"},next:{title:"Offix Datastore Concepts",permalink:"/docs/concepts"}},s=[{value:"Installing Offix DataStore",id:"installing-offix-datastore",children:[]},{value:"Using DataStore",id:"using-datastore",children:[{value:"Building your own GraphQL type",id:"building-your-own-graphql-type",children:[]},{value:"Configuring Datastore",id:"configuring-datastore",children:[]},{value:"Datastore Models",id:"datastore-models",children:[]}]},{value:"Schema Upgrades",id:"schema-upgrades",children:[]}],l={toc:s};function d(e){var t=e.components,n=Object(r.a)(e,["components"]);return Object(o.b)("wrapper",Object(a.a)({},l,n,{components:t,mdxType:"MDXLayout"}),Object(o.b)("h2",{id:"installing-offix-datastore"},"Installing Offix DataStore"),Object(o.b)("p",null,"Using ",Object(o.b)("a",{parentName:"p",href:"https://www.npmjs.com/package/offix-datastore"},"npm"),":"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-shell"},"npm install offix-datastore\n")),Object(o.b)("p",null,"Or ",Object(o.b)("a",{parentName:"p",href:"https://yarnpkg.com/en/package/offix-datastore"},"yarn"),":"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-shell"},"yarn add offix-datastore\n")),Object(o.b)("h2",{id:"using-datastore"},"Using DataStore"),Object(o.b)("h3",{id:"building-your-own-graphql-type"},"Building your own GraphQL type"),Object(o.b)("p",null,"Let's use the following sample schema for our app"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-graphql"},'scalar GraphQLObjectID\n\n"""\n  @model\n  @datasync\n"""\ntype Task {\n    _id: GraphQLObjectID!\n    title: String\n    description: String\n    numberOfDaysLeft: Number\n}\n')),Object(o.b)("h3",{id:"configuring-datastore"},"Configuring Datastore"),Object(o.b)("p",null,"We have a ",Object(o.b)("a",{parentName:"p",href:"/docs/cli"},"cli tool")," that generates DataStore config and Model JSON schema given a GraphQL schema."),Object(o.b)("h3",{id:"datastore-models"},"Datastore Models"),Object(o.b)("p",null,"To be able to store user tasks in the DataStore, you need to create it's DataStore model.\nThe DataStore model provides the API to perform CRUD operations on ",Object(o.b)("inlineCode",{parentName:"p"},"Task")," in the DataStore.\nThe ",Object(o.b)("a",{parentName:"p",href:"/docs/cli"},"cli tool")," generates code to configure each model defined in your graphql schema.\nHere we will assume that you generated the DataStore config files in ",Object(o.b)("inlineCode",{parentName:"p"},"src/datastore/generated"),"."),Object(o.b)("p",null,"Instantiate the ",Object(o.b)("inlineCode",{parentName:"p"},"TaskModel")," with the ",Object(o.b)("inlineCode",{parentName:"p"},"Task")," interface and json schema."),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-typescript",metastring:'title="src/datastore/config.ts"',title:'"src/datastore/config.ts"'},'import { DataStore } from "offix-datastore";\nimport { schema, Task } from "./generated";\n\nconst datastore = new DataStore({\n  dbName: "offix-datastore",\n  replicationConfig: {\n    client: {\n      url: "http://localhost:4000/graphql",\n      wsUrl: "ws://localhost:4000/graphql",\n    }\n  }\n});\n\nexport const TaskModel = datastore.setupModel<Task>(schema.Task);\n\ndatastore.init();\n')),Object(o.b)("div",{className:"admonition admonition-info alert alert--info"},Object(o.b)("div",{parentName:"div",className:"admonition-heading"},Object(o.b)("h5",{parentName:"div"},Object(o.b)("span",{parentName:"h5",className:"admonition-icon"},Object(o.b)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},Object(o.b)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"info")),Object(o.b)("div",{parentName:"div",className:"admonition-content"},Object(o.b)("p",{parentName:"div"},"Once the ",Object(o.b)("inlineCode",{parentName:"p"},"DataStore")," has been configured we need to start ",Object(o.b)("a",{parentName:"p",href:"/docs/replication"},"replication manually"),"."))),Object(o.b)("h2",{id:"schema-upgrades"},"Schema Upgrades"),Object(o.b)("p",null,"The DataStore creates a table on the device for each model.\nWhen you push a new version of your app with models added, replaced or removed,\nthe tables for the new models won't be created on the client device and the unused tables(for removed models)\nwon't be deleted."),Object(o.b)("p",null,"To make the DataStore acknowledge these changes, you need to increment the schema version."),Object(o.b)("p",null,"Using our sample app, suppose we add a ",Object(o.b)("inlineCode",{parentName:"p"},"SubTask"),' model, we need to increment\nthe schema version to trigger the creation of the "user_SubTask" table on the client device.'),Object(o.b)("p",null,"The ",Object(o.b)("inlineCode",{parentName:"p"},"DataStore")," constructor takes a schema version parameter (defaults to 1). "),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-typescript"},"const dataStore = new DataStore({\n  ...,\n  schemaVersion: 2\n});\n")))}d.isMDXComponent=!0}}]);