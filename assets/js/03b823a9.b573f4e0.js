(window.webpackJsonp=window.webpackJsonp||[]).push([[6],{148:function(e,t,n){"use strict";n.d(t,"a",(function(){return l})),n.d(t,"b",(function(){return f}));var a=n(0),r=n.n(a);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function d(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var c=r.a.createContext({}),p=function(e){var t=r.a.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):d(d({},t),e)),n},l=function(e){var t=p(e.components);return r.a.createElement(c.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.a.createElement(r.a.Fragment,{},t)}},b=r.a.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,o=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),l=p(n),b=a,f=l["".concat(o,".").concat(b)]||l[b]||u[b]||i;return n?r.a.createElement(f,d(d({ref:t},c),{},{components:n})):r.a.createElement(f,d({ref:t},c))}));function f(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,o=new Array(i);o[0]=b;var d={};for(var s in t)hasOwnProperty.call(t,s)&&(d[s]=t[s]);d.originalType=e,d.mdxType="string"==typeof e?e:a,o[1]=d;for(var c=2;c<i;c++)o[c]=n[c];return r.a.createElement.apply(null,o)}return r.a.createElement.apply(null,n)}b.displayName="MDXCreateElement"},65:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return o})),n.d(t,"metadata",(function(){return d})),n.d(t,"toc",(function(){return s})),n.d(t,"default",(function(){return p}));var a=n(3),r=n(7),i=(n(0),n(148)),o={id:"edits",title:"Edits",sidebar_label:"Edits"},d={unversionedId:"edits",id:"version-0.5.0/edits",isDocsHomePage:!1,title:"Edits",description:"Saving Data",source:"@site/versioned_docs/version-0.5.0/edits.md",slug:"/edits",permalink:"/docs/edits",editUrl:"https://github.com/aerogear/offix/edit/master/website/versioned_docs/version-0.5.0/edits.md",version:"0.5.0",sidebar_label:"Edits",sidebar:"version-0.5.0/docs",previous:{title:"Queries",permalink:"/docs/queries"},next:{title:"Subscribing to Changes",permalink:"/docs/subscriptions"}},s=[{value:"Saving Data",id:"saving-data",children:[]},{value:"Updating Data",id:"updating-data",children:[{value:"Save Or Update",id:"save-or-update",children:[]}]},{value:"Deleting Data",id:"deleting-data",children:[]}],c={toc:s};function p(e){var t=e.components,n=Object(r.a)(e,["components"]);return Object(i.b)("wrapper",Object(a.a)({},c,n,{components:t,mdxType:"MDXLayout"}),Object(i.b)("h2",{id:"saving-data"},"Saving Data"),Object(i.b)("p",null,"The DataStore Models provides two methods to save data;"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"save()")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",{parentName:"li",href:"#save-or-update"},"saveOrUpdate()"))),Object(i.b)("p",null,Object(i.b)("inlineCode",{parentName:"p"},"save()")," generates a primary key (in this case, an ",Object(i.b)("inlineCode",{parentName:"p"},"id"),"), if one is not provided."),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-typescript"},"import { TaskModel } from './datastoreConfig';\n\nTaskModel.save({\n    title: \"Write Docs\",\n    description: \"Write Offix Docs\",\n}).then((data) => {\n    console.log(data); // { _id: '...', title, description }\n})\n")),Object(i.b)("h2",{id:"updating-data"},"Updating Data"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-typescript"},'import { TaskModel } from \'./datastoreConfig\';\n\n// update the title of task to "Offix Test"\nTaskModel.updateById({\n    _id: documentId\n    title: "Offix Test"\n})\n.then((data) => {\n    console.log(data); // updated data\n})\n')),Object(i.b)("h3",{id:"save-or-update"},"Save Or Update"),Object(i.b)("p",null,"The DataStore provides a ",Object(i.b)("inlineCode",{parentName:"p"},"saveOrUpdate")," method to use for upserts.\nIf the primary key(in this case an ",Object(i.b)("inlineCode",{parentName:"p"},"id"),") is provided, the DataStore will\ntry to update the existing document if it exists, if it does not exist\nor no primary key was provided, the DataStore saves the data as a new document."),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-typescript"},'TaskModel.saveOrUpdate({\n    _id: documentId\n    title: "Offix Test"\n})\n.then((data) => {\n    console.log(data); // updated data\n})\n')),Object(i.b)("h2",{id:"deleting-data"},"Deleting Data"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-typescript"},"await TaskModel.removeById(documentId);\n")))}p.isMDXComponent=!0}}]);